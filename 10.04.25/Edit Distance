class Solution(object):
    def minDistance(self, word1, word2):
        """
        :type word1: str
        :type word2: str
        :rtype: int
        """
        n1, n2 = len(word1), len(word2)

        # Create a 2D DP table where dp[i][j] represents the minimum number 
        # of operations required to convert word1[0:i] to word2[0:j].
        dp = [[0 for _ in range(n2 + 1)] for _ in range(n1 + 1)]

        # Base Case: If one string is empty, the only option is to insert/delete all characters.
        # If word1 is empty, we need `j` insertions to match word2.
        for j in range(n2 + 1):
            dp[0][j] = j  
        # If word2 is empty, we need `i` deletions to match word1.
        for i in range(n1 + 1):
            dp[i][0] = i  

        # Fill the DP table
        for i in range(1, n1 + 1):
            for j in range(1, n2 + 1):
                if word1[i - 1] != word2[j - 1]:  
                    # If the characters are different, we consider three operations:
                    # 1. Insert (dp[i][j-1] + 1) → Insert word2[j-1] into word1.
                    # 2. Delete (dp[i-1][j] + 1) → Remove word1[i-1] to match word2.
                    # 3. Replace (dp[i-1][j-1] + 1) → Replace word1[i-1] with word2[j-1].
                    dp[i][j] = min(dp[i][j - 1], dp[i - 1][j - 1], dp[i - 1][j]) + 1  
                else:
                    # If the characters match, no new operation is needed.
                    # Just carry over the previous edit distance.
                    dp[i][j] = dp[i - 1][j - 1]  

        # The bottom-right cell contains the minimum edit distance.
        return dp[-1][-1]
